{"version":3,"sources":["logo.png","Model/Model.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["Model","JSON","parse","tokenizer","text","loadWordToIndex","word_index","splitted","toLowerCase","split","sequence","i","length","push","console","log","tf","model","out","predict","slice","as1D","data","EssayForm","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","run","then","alert","preventDefault","onSubmit","onChange","rows","cols","style","width","type","React","Component","App","className","src","logo","alt","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"umx2GAAe,G,OAAA,IAA0B,kC,0FC2B1BA,E,oGAtBX,WACI,OAAOC,KAAKC,MAAMC,EAAS,OAAT,c,wDAGtB,WAAiBC,GAAjB,iGAC2BJ,EAAMK,kBADjC,OAII,IAHIC,EADR,OAEQC,EAAWH,EAAKI,cAAcC,MAAM,KACpCC,EAAW,GACPC,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IAChCD,EAASG,KAAKP,EAAWC,EAASI,KAEtC,IAAKA,EAAIJ,EAASK,OAAQD,EAAI,IAAKA,IAC/BD,EAASG,KAAK,GARtB,OAUIC,QAAQC,IAAIL,GAVhB,UAWwBM,IAAmB,+FAX3C,eAWUC,EAXV,OAYQC,EAAMD,EAAME,QAAQH,IAAY,CAACN,KAZzC,UAckBQ,EAAIE,MAAM,CAAC,EAAG,GAAI,GAAGC,OAAOC,OAd9C,2BAcsD,GAdtD,KAc2D,EAd3D,4BAc+D,GAd/D,4C,sEC6BWC,E,kDAnCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,MAAO,8CAGR,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPH,E,gDAUnB,SAAaE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMG,OAAOP,U,0BAGrC,SAAaI,GACd9B,EAAMkC,IAAIH,KAAKN,MAAMC,OAAOS,MAAK,SAACb,GACjCc,MAAMd,MAEJQ,EAAMO,mB,oBAGR,WACE,OACE,uBAAMC,SAAUP,KAAKF,aAArB,UACE,0DAEL,uBACQ,0BAAUH,MAAOK,KAAKN,MAAMC,MAAOa,SAAUR,KAAKJ,aAAca,KAAK,KAAKC,KAAK,MAAMC,MAAO,CAACC,MAAM,YAE5G,uBACM,uBAAOC,KAAK,SAASlB,MAAM,kB,GA/BXmB,IAAMC,WCefC,MAbf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACA,qBAAKA,UAAU,QAAQC,IAAKC,EAAMC,IAAI,gBAAgBR,MAAM,KAAKS,OAAO,SAAa,oBAAIJ,UAAU,aAAd,+BAErF,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,UCCOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ac57f32c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.005d93d9.png\";","import * as tf from \"@tensorflow/tfjs\"\r\nimport tokenizer from \"./tokenizer.json\"\r\n\r\n\r\nclass Model{\r\n    static loadWordToIndex(){\r\n        return JSON.parse(tokenizer[\"config\"][\"word_index\"]);\r\n    }\r\n\r\n    static async run(text){\r\n        var word_index = await Model.loadWordToIndex();\r\n        var splitted = text.toLowerCase().split(\" \")\r\n        var sequence = []\r\n        for(var i = 0; i < splitted.length; i++){\r\n            sequence.push(word_index[splitted[i]])\r\n        }\r\n        for (i = splitted.length; i < 200; i++){\r\n            sequence.push(0)\r\n        }\r\n        console.log(sequence)\r\n        const model = await tf.loadLayersModel(\"https://raw.githubusercontent.com/sujaykonda/studentreviews/main/src/Model/model/model.json\")\r\n        var out = model.predict(tf.tensor2d([sequence]))\r\n        \r\n        return((await out.slice([0, 0], 1).as1D().data())[0] * 5 + 3)\r\n    }\r\n}\r\n\r\nexport default Model;","import React from 'react';\r\nimport Model from './Model/Model'\r\nclass EssayForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tvalue: 'Please Write Some Feedback for the Teacher'\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n\tModel.run(this.state.value).then((data) => {\r\n\t\talert(data);\r\n\t})\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n\t\t\tFeedback For Teacher:\r\n\t\t\t<br />\r\n          \t<textarea value={this.state.value} onChange={this.handleChange} rows=\"10\" cols=\"200\" style={{width:\"70%\"}} />\r\n        </label>\r\n\t\t<br />\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default EssayForm;","import logo from './logo.png';\r\nimport './App.css';\r\nimport EssayForm from './Form';\r\n\r\nfunction App(){\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"topBar\">\r\n      <img className=\"image\" src={logo} alt=\"dogeclassroom\" width=\"90\" height=\"67.5\"></img><h1 className=\"topBarText\"> DogeClassrome</h1>\r\n      </div>\r\n      <div className=\"App-header\">\r\n        <EssayForm />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}